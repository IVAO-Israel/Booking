// <auto-generated />
using System;
using Booking.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Booking.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20250818092129_AddedTokenToDb")]
    partial class AddedTokenToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Booking.Data.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DivisionId")
                        .HasColumnType("longtext");

                    b.Property<int>("IVAOUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("Booking.Data.AdministratorRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AdministratorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.ToTable("AdministratorRole");
                });

            modelBuilder.Entity("Booking.Data.AtcPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DivisionId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IVAOCallsign")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("IVAOPositionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AtcPositions");
                });

            modelBuilder.Entity("Booking.Data.AtcPositionBooking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EventAtcPositionId")
                        .HasColumnType("char(36)");

                    b.Property<int>("IVAOUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventAtcPositionId");

                    b.ToTable("BookedAtcPositions");
                });

            modelBuilder.Entity("Booking.Data.DbTokenData", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("IvaoTokenData");
                });

            modelBuilder.Entity("Booking.Data.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DivisionId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Booking.Data.EventAtcPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AtcPositionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BeginTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DivisionId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<int>("RequiredRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AtcPositionId");

                    b.HasIndex("EventId");

                    b.ToTable("EventAtcPositions");
                });

            modelBuilder.Entity("Booking.Data.AdministratorRole", b =>
                {
                    b.HasOne("Booking.Data.Administrator", "Administrator")
                        .WithMany("Roles")
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("Booking.Data.AtcPositionBooking", b =>
                {
                    b.HasOne("Booking.Data.EventAtcPosition", "EventAtcPosition")
                        .WithMany("Bookings")
                        .HasForeignKey("EventAtcPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventAtcPosition");
                });

            modelBuilder.Entity("Booking.Data.EventAtcPosition", b =>
                {
                    b.HasOne("Booking.Data.AtcPosition", "AtcPosition")
                        .WithMany()
                        .HasForeignKey("AtcPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Booking.Data.Event", "Event")
                        .WithMany("AvailableAtcPositions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AtcPosition");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Booking.Data.Administrator", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Booking.Data.Event", b =>
                {
                    b.Navigation("AvailableAtcPositions");
                });

            modelBuilder.Entity("Booking.Data.EventAtcPosition", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
