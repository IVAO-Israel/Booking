@implements IDisposable
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager

<div class="nav-scrollable">
    <nav class="nav flex-column">
        <div class="top-row ps-3 navbar bg-light">
            <div class="container-fluid">
                <a class="navbar-brand" href="">
                    <img src="main_logo.png" class="w-100"/>
                    <div class="text-center w-100" style="color:#0D2C99;">Booking</div>
                </a>
            </div>
        </div>
        <div class="nav-item">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                Home
            </NavLink>
        </div>
        <div class="nav-item">
            <NavLink class="nav-link" href="events/upcoming" Match="NavLinkMatch.All">
                Upcoming event
            </NavLink>
        </div>
        <AuthorizeView Policy="Administrator">
            <Authorized>
                <div class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" @onclick:preventDefault="true">Administration</a>
                    <ul class="dropdown-menu">
                        <li><NavLink class="dropdown-item" href="events/admin">Events</NavLink></li>
                    </ul>
                </div>
            </Authorized>
        </AuthorizeView>
        <AuthorizeView>
            <Authorized>
                <div class="nav-item">
                    <NavLink class="nav-link" href="logout" Match="NavLinkMatch.All">
                        Logout
                    </NavLink>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item">
                    <NavLink class="nav-link" href="login" Match="NavLinkMatch.All">
                        Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>
@code {
    [Parameter] public string? Id { get; set; }
    private string? currentUrl;
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

