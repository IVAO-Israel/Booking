@page "/events/upcoming"
@using Booking.Extensions
@using Microsoft.AspNetCore.Authorization
@using Booking.Data
@using Booking.Services.Interfaces
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IEventService EventService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
<PageTitle>Upcoming events</PageTitle>
<script>
	// Initialize all tooltips on the page
	document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el => {
	  new bootstrap.Tooltip(el);
	});
</script>
<h1 class="text-center">Upcoming events</h1>
@if(Events is null)
{
	<div class="text-center"><div class="spinner-border"></div>Loading...</div>
} else if(!Events.Any())
{
	<div class="text-center">No upcoming events.</div>
} else
{
	<QuickGrid Items="Events.AsQueryable()" Class="table table-bordered table-hover">
		<PropertyColumn Property="@(e => e.Name)" Title="Name" />
		<PropertyColumn Property="@(e => Date(e))" Title="Date "/>
		<PropertyColumn Property="@(e => Time(e))" Title="Time"/>
		<TemplateColumn TGridItem="Event">
			<HeaderTemplate>
			</HeaderTemplate>
			<ChildContent Context="e">
				<div>
					@if (e.AvailableAtcPositions is not null && e.AvailableAtcPositions.Any())
					{
						<button class="btn btn-primary"
								data-bs-toggle="tooltip"
								data-bs-placement="top"
								title="Book ATC position"
								@onclick="() => BookAtc(e)">
							&#x1F3A7;
						</button>
					}
					else if (e.AvailableAtcPositions is not null)
					{
						//TODO: what if no ATC booking for event
					}
					<!--<button class="btn btn-primary"
							data-bs-toggle="tooltip"
							data-bs-placement="top"
							title="Book flight"
							@onclick="()=>BookFlight(e)">&#x2708;</button>-->
				</div>
			</ChildContent>
		</TemplateColumn>
	</QuickGrid>
}

@code {
	private List<Event>? Events;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await Load();
		}
	}
	private async Task Load()
	{
		Events = (await EventService.GetUpcomingEvents()).OrderBy(e => e.BeginTime).ToList();
		foreach(Event e in Events)
		{
			await EventService.LoadAvailableAtcPositions(e);
		}
		await InvokeAsync(StateHasChanged);
	}
	private string Date(Event eventObj)
	{
		if(eventObj.BeginTime.Date == eventObj.BeginTime.Date)
		{
			return eventObj.BeginTime.ToDisplayDate();
		} else
		{
			return $"{eventObj.BeginTime.ToDisplayDate()}-{eventObj.EndTime.ToDisplayDate()}";
		}
	}
	private string Time(Event eventObj)
	{
		if (eventObj.BeginTime.Date == eventObj.BeginTime.Date)
		{
			return $"{eventObj.BeginTime.ToDisplayTime()}-{eventObj.EndTime.ToDisplayTime()}";
		} else
		{
			return $"{eventObj.BeginTime.ToDisplayDate()} {eventObj.BeginTime.ToDisplayTime()}-{eventObj.EndTime.ToDisplayDate()} {eventObj.EndTime.ToDisplayTime()}";
		}
	}
	private void BookAtc(Event eventObj)
	{
		NavigationManager.NavigateTo($"events/{eventObj.Url}/atc/positions");
	}
	private void BookFlight(Event eventObj)
	{
		//TODO: Add navigation
	}
}
