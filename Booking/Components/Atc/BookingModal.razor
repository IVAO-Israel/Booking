@using Booking.Data
@using Booking.Services.Interfaces
@inject IAtcPositionBookingService AtcPositionBookingService
@rendermode InteractiveServer
@if (IsVisible && Booking != null)
{
    <div class="modal fade show d-block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Book position</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="ShowConfirmCancel"></button>
                </div>
                <EditForm EditContext="editContext" method="post" OnValidSubmit="OnValidSubmit" FormName="create" Enhance>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="row">
                            <div class="col"><label for="event" class="form-label">Event</label></div>
                            <div class="col"><InputText id="event" @bind-Value="Booking.EventAtcPosition.Event.Name" class="form-control" readonly/></div>
                        </div>
                        <div class="row">
                            <div class="col"><label for="position" class="form-label">Position</label></div>
                            <div class="col"><InputText id="position" @bind-Value="Booking.EventAtcPosition.AtcPosition.Name" class="form-control" readonly/></div>
                        </div>
                        <div class="row">
                            <div class="col"><label for="begintime" class="form-label">Begin time</label></div>
                            <div class="col">
                                <input type="datetime-local"
                                       id="begintime"
                                       class="form-control"
                                       @bind-value="Booking.BeginTime"
                                       @bind-value:event="onchange" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col"><label for="endtime" class="form-label">End time</label></div>
                            <div class="col">
                                <input type="datetime-local"
                                       id="begintime"
                                       class="form-control"
                                       @bind-value="Booking.EndTime"
                                       @bind-value:event="onchange" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col"><label for="ivaouserid" class="form-label">User VID</label></div>
                            <div class="col"><InputNumber id="ivaouserid" @bind-Value="Booking.IVAOUserId" class="form-control" readonly/></div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="ShowConfirmCancel">Cancel</button>
                        @if (!New)
                        {
                            <button type="button" class="btn btn-danger" @onclick="ShowConfirmRemove">Remove booking</button>
                        }
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
    <ConfirmModal @ref="ConfirmCancel" OnConfirm="Cancel" />
    <ConfirmModal @ref="ConfirmRemove" OnConfirm="async () => await Remove()" />
}

@code {
    private bool IsVisible { get; set; }
    private ConfirmModal ConfirmCancel = default!;
    private ConfirmModal ConfirmRemove = default!;
    [SupplyParameterFromForm]
    private AtcPositionBooking? Booking { get; set; }
    [Parameter]
    public int CurrentIvaoUserAtcRating { get; set; }
    private bool New { get; set; } = false;
    private bool Readonly { get; set; } = false;
    [Parameter]
    public Func<AtcPositionBooking, bool, bool, Task>? OnAfterSubmitAsync { get; set; }
    private EditContext editContext = default!;
    private ValidationMessageStore messageStore = default!;
    public void Show(AtcPositionBooking booking, bool New = false, bool Readonly = false)
    {
        Booking = booking;
        this.New = New;
        this.Readonly = Readonly;
        editContext = new EditContext(Booking);
        messageStore = new ValidationMessageStore(editContext);
        editContext.OnValidationRequested += (sender, args) =>
            {
                messageStore.Clear();
                if (Booking is not null && Booking.HasOverlap())
                {
                    messageStore.Add(editContext.Field(string.Empty), "Bookings is overlapping.");
                }
                editContext.NotifyValidationStateChanged();
            };
        IsVisible = true;
        StateHasChanged();
    }
    private async Task OnValidSubmit()
    {
        IsVisible = false;
        await InvokeAsync(StateHasChanged);
        if (Booking != null)
        {
            if (New)
            {
                await AtcPositionBookingService.AddAtcPositionBooking(Booking);
            }
            else
            {
                await AtcPositionBookingService.UpdateAtcPositionBooking(Booking);
            }
            if (OnAfterSubmitAsync is not null)
            {
                await OnAfterSubmitAsync.Invoke(Booking, New, false);
            }
        } else
        {
            throw new ArgumentNullException(nameof(Booking));
        }
    }
    private async Task Remove()
    {
        IsVisible = false;
        await InvokeAsync(StateHasChanged);
        if(Booking != null)
        {
            await AtcPositionBookingService.RemoveAtcPositionBooking(Booking);
            if (OnAfterSubmitAsync is not null)
            {
                await OnAfterSubmitAsync.Invoke(Booking, New, true);
            }
        } else
        {
            throw new ArgumentNullException(nameof(Booking));
        }
    }
    private void Cancel()
    {
        IsVisible = false;
        StateHasChanged();
    }
    private void ShowConfirmCancel()
    {
        ConfirmCancel.Show("Changes will not be saved", "Do you want to close without saving changes?");
    }
    private void ShowConfirmRemove()
    {
        ConfirmRemove.Show("Remove booking", "Do you want to remove this booking?");
    }
}