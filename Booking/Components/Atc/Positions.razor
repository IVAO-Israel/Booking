@page "/{DivisionId}/events/{EventUrl}/atc/positions"
@using Booking.Data
@using Booking.Ivao.Services
@using Booking.Services
@using Booking.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IEventService EventService
@inject IEventAtcPositionService EventAtcPositionService
@inject NavigationManager NavigationManager
@inject UserService IvaoUserService
@inject IConfiguration Configuration
@rendermode InteractiveServer
<PageTitle>Book ATC position</PageTitle>
<h1 class="text-center">Book ATC position</h1>
@if(Event is null)
{
	<div class="text-center"><div class="spinner-border"></div>Loading...</div>
} else if (!IsAllowed && !IsAdmin)
{
	<div class="alert alert-danger text-center">
		Only memebers of @DivisionId or members holding GCA are allowed to book ATC positions.
	</div>
} else if (!IsAdmin)
{
	if(DateTime.UtcNow > Event.EndTime)
	{
		<div class="alert alert-success">Event is finished.</div>
	} else if (!Event.IsVisible)
	{
		<div class="alert alert-danger">Event is not published.</div>
	}
} else
{
	if (IsAdmin)
	{
		if(Event.Url is null && Event.IsVisible)
		{
			<div class="alert alert-danger">Event url is invalid.</div>
		}
		if (DateTime.UtcNow > Event.EndTime)
		{
			<div class="alert alert-success">Event is finished.</div>
		}
	}
	<div>
		<div class="row">
			<div class="col"><label for="name" class="form-label">Event name</label></div>
			<div class="col">
				<InputText id="name" class="form-control" @bind-Value="Event.Name" readonly/>
			</div>
		</div>
		<div class="row">
			<div class="col"><label for="begintime" class="form-label">Begin time</label></div>
			<div class="col">
				<input type="datetime-local"
					   id="begintime"
					   class="form-control"
					   @bind-value="Event.BeginTime"
					   @bind-value:event="onchange" readonly/>
			</div>
		</div>
		<div class="row">
			<div class="col"><label for="endtime" class="form-label">End time</label></div>
			<div class="col">
				<input type="datetime-local"
					   id="begintime"
					   class="form-control"
					   @bind-value="Event.EndTime"
					   @bind-value:event="onchange" readonly/>
			</div>
		</div>
	</div>
	<PositionsTimeline Event="Event"/>
}

@code {
	[Parameter]
	public string EventUrl { get; set; } = default!;
	[Parameter]
	public string DivisionId { get; set; } = default!;
	private Event? Event;
	private bool IsAllowed = false;
	private bool IsAdmin = false;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			DivisionId = DivisionId.ToUpper();
			await Load();
		}
	}
	private async Task Load()
	{
		IsAdmin = await IvaoUserService.GetIsAdmin();
		string userDivId = await IvaoUserService.GetUserDivisionId();
		if (userDivId.Equals(DivisionId, StringComparison.OrdinalIgnoreCase) || await IvaoUserService.UserHasGca())
		{
			IsAllowed = true;
		}
		Event = await EventService.GetEventByUrl(DivisionId, EventUrl);
		if (Event is null)
		{
			if (IsAdmin && Guid.TryParse(EventUrl, out Guid id))
			{
				Event = await EventService.GetEvent(id);
				if(Event is null)
				{
					NavigationManager.NavigateTo($"{DivisionId}/events/admin");
				}
				else
				{
					await EventService.LoadAvailableAtcPositions(Event);
				}
			}
			else
			{
				NavigationManager.NavigateTo($"{DivisionId}/events/upcoming");
			}
		}
		else
		{
			await EventService.LoadAvailableAtcPositions(Event);
		}
		await InvokeAsync(StateHasChanged);
	}
}
