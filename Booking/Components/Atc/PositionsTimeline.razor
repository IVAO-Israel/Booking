@using Booking.Data
@using Booking.Extensions
@using Booking.Services.Interfaces
@inject IEventAtcPositionService EventAtcPositionService
@rendermode InteractiveServer
<script>
    // Initialize all tooltips on the page
    document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el => {
      new bootstrap.Tooltip(el);
    });
</script>
<style>
    .gantt-container {
        margin-top: 32px;
    }

    .gantt-header, .gantt-row {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
    }

    .gantt-label {
        width: 150px;
        text-align: right;
        margin-right: 10px;
        font-weight: bold;
    }

    .gantt-time-container, .gantt-bar-container {
        flex: 1;
        display: flex;
        position: relative;
        height: 30px;
    }

    .gantt-time-container {
        border-bottom: 1px solid #dee2e6;
    }

    .gantt-time-cell {
        text-align: center;
        border-right: 1px solid #dee2e6;
        font-size: 14px;
        line-height: 30px;
    }

    .gantt-bar-container {
        background: #D7D7DC;
        border-radius: 5px;
    }

    .gantt-bar {
        height: 100%;
        border-radius: 5px;
        position: absolute;
        top: 0;
        color: #FFFFFF;
        text-align: center;
        cursor: pointer;
    }
</style>
<div class="gantt-container">
    <!-- Header Row -->
    <div class="gantt-header">
        <div class="gantt-label">Position / Time</div>
        <div class="gantt-time-container">
            @{
                int i = 0;
                for (DateTime dt = Event.BeginTime; dt <= Event.EndTime; dt = dt.AddHours(1))
                {
                    <div class="gantt-time-cell" style="left: @((Step*i).ToString().Replace(',','.'))%; width: @Step.ToString().Replace(',','.')%;">@dt.ToDisplayTime()</div>
                    i += 1;
                }
            }
        </div>
    </div>
    <!-- Positions Rows -->
    @foreach (var row in PositionTimesBookings)
    {
        <div class="gantt-row">
            <div class="gantt-label">@row.Position.Name</div>
            <div class="gantt-bar-container">
                @foreach (var time in row.Free)
                {
                    <div class="gantt-bar bg-success"
                         style="@GetBarStyle(time)"
                         data-bs-toggle="tooltip"
                         data-bs-placement="top"
                         title="@BookingTime(time)">
                        Book now
                    </div>
                }
                @foreach (var booking in row.Bookings)
                {
                    <div class="gantt-bar bg-danger"
                         style="@GetBarStyle(booking)"
                         data-bs-toggle="tooltip"
                         data-bs-placement="top"
                         title="@BookingTime(booking)">
                        @booking.IVAOUserId
                    </div>
                }
            </div>
        </div>
    }

</div>

@code {
    [Parameter, EditorRequired]
    public Event Event { get; set; }
    private List<PositionTimeBooking> PositionTimesBookings = [];
    private double Step;
    protected override async Task OnInitializedAsync()
    {
        foreach (var position in Event.AvailableAtcPositions!)
        {
            await EventAtcPositionService.LoadBookings(position);
        }
        PositionTimesBookings = Event.AvailableAtcPositions.GroupBy(p => p.AtcPosition)
                        .Select(g => new PositionTimeBooking
                        {
                            Position = g.Key,
                            Free = g.SelectMany(f => PositionTimeBooking.GetFreeIntervals(f)).ToList(),
                            Bookings = g.SelectMany(b => b.Bookings!).OrderBy(b => b.BeginTime).ToList()
                        }).ToList();
        Step = 100 / (Event.EndTime - Event.BeginTime).TotalHours;
    }
    private double GetLeft(AtcPositionBooking booking)
    {
        return (booking.BeginTime - Event.BeginTime).TotalHours * Step;
    }
    private double GetLeft(PositionTimeBooking.FreeTime time)
    {
        return (time.BeginTime - Event.BeginTime).TotalHours * Step;
    }
    private double GetWidth(AtcPositionBooking booking)
    {
        return (booking.EndTime - booking.BeginTime).TotalHours * Step;
    }
    private double GetWidth(PositionTimeBooking.FreeTime time)
    {
        return (time.EndTime - time.BeginTime).TotalHours * Step;
    }
    private string GetBarStyle(AtcPositionBooking booking)
    {
        return $"left: {GetLeft(booking).ToString().Replace(',', '.')}%; width: {GetWidth(booking).ToString().Replace(',', '.')}%;";
    }
    private string GetBarStyle(PositionTimeBooking.FreeTime time)
    {
        return $"left: {GetLeft(time).ToString().Replace(',', '.')}%; width: {GetWidth(time).ToString().Replace(',', '.')}%;";
    }
    private string BookingTime(AtcPositionBooking booking)
    {
        return $"Booked from {booking.BeginTime.ToDisplayTime()} to {booking.EndTime.ToDisplayTime()}";
    }
    private string BookingTime(PositionTimeBooking.FreeTime time)
    {
        return $"Free from {time.BeginTime.ToDisplayTime()} to {time.EndTime.ToDisplayTime()}";
    }
    private class PositionTimeBooking
    {
        public AtcPosition Position { get; set; } = default!;
        public List<FreeTime> Free { get; set; } = [];
        public List<AtcPositionBooking> Bookings { get; set; } = [];
        public class FreeTime
        {
            public DateTime BeginTime { get; set; }
            public DateTime EndTime { get; set; }
        }
        public static List<FreeTime> GetFreeIntervals(EventAtcPosition position)
        {
            var freeSlots = new List<FreeTime>();
            if (position.Bookings == null || !position.Bookings.Any())
            {
                freeSlots.Add(new()
                {
                    BeginTime = position.BeginTime,
                    EndTime = position.EndTime
                });
                return freeSlots;
            }
            var sorted = position.Bookings.OrderBy(b => b.BeginTime).ToList();
            if (position.BeginTime < sorted.First().BeginTime)
            {
                freeSlots.Add(new()
                {
                    BeginTime = position.BeginTime,
                    EndTime = sorted.First().BeginTime
                });
            }
            for (int i = 0; i < sorted.Count - 1; i++)
            {
                var currentEnd = sorted[i].EndTime;
                var nextBegin = sorted[i + 1].BeginTime;
                if (currentEnd < nextBegin)
                {
                    freeSlots.Add(new()
                    {
                        BeginTime = currentEnd,
                        EndTime = nextBegin
                    });
                }
            }
            if (sorted.Last().EndTime < position.EndTime)
            {
                freeSlots.Add(new()
                {
                    BeginTime = sorted.Last().EndTime,
                    EndTime = position.EndTime
                });
            }
            return freeSlots;
        }
    }
}