@using Booking.Data
@using Booking.Services.Interfaces
@using System.Reflection
@using Microsoft.AspNetCore.Authorization
@using Booking.Extensions
@using System.ComponentModel.DataAnnotations.Schema
@inject IAtcPositionService AtcPositionService
@inject Booking.Ivao.Services.AtcPositionService IvaoAtcPosition
@attribute [Authorize (Policy="ATC")]
@rendermode InteractiveServer
@if (IsVisible && Position != null)
{
    <div class="modal fade show d-block" tabindex="-1" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">ATC position</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="ShowConfirmCancel"></button>
                </div>
                <EditForm EditContext="editContext" method="post" OnValidSubmit="OnValidSubmit" FormName="create" Enhance>
                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="row">
                            <div class="col"><label for="ivaocallsign" class="form-label">IVAO callsign</label></div>
                            <div class="col"><InputText id="ivaocallsign" @bind-Value="Position.IVAOCallsign" class="form-control" readonly="@(!found)"/></div>
                        </div>
                        @if (!found)
                        {
                            <div class="row"><button type="button" class="btn btn-primary" @onclick="SearchIvao">Search in IVAO database</button></div>
                        }
                        <div class="row">
                            <div class="col"><label for="name" class="form-label">Name</label></div>
                            <div class="col"><InputText id="name" @bind-Value="Position.Name" class="form-control" /></div>
                        </div>
                        <div class="row">
                            <div class="col"><label for="description" class="form-label">Description</label></div>
                            <div class="col"><InputTextArea id="description" @bind-Value="Position.Description" class="form-control" /></div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="ShowConfirmCancel">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
    <ConfirmModal @ref="ConfirmCancel" OnConfirm="Cancel" />
}

@code {
    private bool IsVisible { get; set; }
    private ConfirmModal ConfirmCancel = default!;
    [SupplyParameterFromForm]
    private AtcPosition? Position { get; set; }
    private bool New { get; set; } = false;
    private bool Readonly { get; set; } = false;
    [Parameter]
    public Action<AtcPosition, bool>? OnAfterSubmit { get; set; }
    private EditContext editContext = default!;
    private ValidationMessageStore messageStore = default!;
    private bool found = false;
    public void Show(AtcPosition position, bool New = false, bool Readonly = false)
    {
        Position = position;
        this.New = New;
        this.Readonly = Readonly;
        if(Position.IVAOPositionId is not null)
        {
            found = true;
        }
        editContext = new EditContext(Position);
        messageStore = new ValidationMessageStore(editContext);
        editContext.OnValidationRequested += (sender, args) =>
            {
                messageStore.Clear();
                editContext.NotifyValidationStateChanged();
            };
        IsVisible = true;
        StateHasChanged();
    }
    private async Task OnValidSubmit()
    {
        IsVisible = false;
        await InvokeAsync(StateHasChanged);
        if (Position != null)
        {
            if (New)
            {
                await AtcPositionService.AddAtcPosition(Position);
            }
            else
            {
                await AtcPositionService.UpdateAtcPosition(Position);
            }
            if (OnAfterSubmit is not null)
            {
                OnAfterSubmit.Invoke(Position, New);
            }
        } else
        {
            throw new ArgumentNullException(nameof(Position));
        }
    }
    private void Cancel()
    {
        IsVisible = false;
        StateHasChanged();
    }
    private void ShowConfirmCancel()
    {
        ConfirmCancel.Show("Changes will not be saved", "Do you want to close without saving changes?");
    }
    private async Task SearchIvao()
    {
        var pos = await IvaoAtcPosition.GetAtcPosition(Position!.IVAOCallsign.ToUpper());
        if(pos is not null)
        {
            Position!.IVAOCallsign = pos.ComposePosition;
            Position.Name = pos.ComposePosition;
            Position.IVAOPositionId = pos.Id;
            found = true;
            Readonly = true;
            await InvokeAsync(StateHasChanged);
        }
    }
}